using System.Reflection;
using System.Text;

using api.Features.Profiles;
using api.Features.Projects.Exists;
using api.Models;

namespace api.AppInfrastructure;

public static class DcdTypescriptGenerator
{
    private static readonly List<Type> EnumTypes = [
        typeof(NoAccessReason),
        typeof(ProjectPhase)
    ];

    public static async Task GenerateTypescriptFiles()
    {
        if (!DcdEnvironments.WriteTypescriptFiles)
        {
            return;
        }

        await WriteStringConstantFile(typeof(ProfileTypes));

        await WriteEnumConstantFile();
    }

    private static async Task WriteStringConstantFile(Type type)
    {
        var filePath = $"../../frontend/src/{type.Name.ToLower()}.ts";

        var builder = new StringBuilder();

        builder.AppendLine("/* This file is autogenerated by the backend. Do not modify manually. */");
        builder.AppendLine();

        builder.AppendLine($"declare namespace {type.Name} {{");

        var constantValues = type.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy)
            .Where(fi => fi is { IsLiteral: true, IsInitOnly: false } && fi.FieldType == typeof(string))
            .Select(x => (string)x.GetRawConstantValue()!)
            .OrderBy(x => x)
            .ToList();

        foreach (var constantValue in constantValues)
        {
            builder.AppendLine($"    export const {constantValue} = \"{constantValue}\"");
        }

        builder.AppendLine();
        builder.AppendLine($"    export type {type.Name}Values =");
        builder.AppendLine(string.Join(" |\n", constantValues.Select(x => $"        \"{x}\"")));

        builder.AppendLine("}");

        await File.WriteAllTextAsync(filePath, builder.ToString());
    }

    private static async Task WriteEnumConstantFile()
    {
        const string filePath = "../../frontend/src/enums.ts";

        var builder = new StringBuilder();

        builder.AppendLine("/* This file is autogenerated by the backend. Do not modify manually. */");
        builder.AppendLine();

        foreach (var enumType in EnumTypes)
        {
            builder.AppendLine($"export enum {enumType.Name} {{");

            foreach (var enumValue in Enum.GetValues(enumType))
            {
                builder.AppendLine($"    {enumValue.ToString()} = {(int)enumValue},");
            }

            builder.AppendLine("}");
            builder.AppendLine();
        }

        await File.WriteAllTextAsync(filePath, builder.ToString());
    }
}
