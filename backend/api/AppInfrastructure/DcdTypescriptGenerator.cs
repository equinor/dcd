using System.Reflection;
using System.Text;

using api.Features.Profiles;
using api.Features.Projects.Exists;
using api.Models;
using api.Models.Enums;

namespace api.AppInfrastructure;

public static class DcdTypescriptGenerator
{
    private static readonly List<Type> EnumTypes = [
        typeof(NoAccessReason),
        typeof(ProjectPhase),
        typeof(Currency),
        typeof(PhysUnit),
        typeof(Concept),
        typeof(ProjectMemberRole),
        typeof(Source),
        typeof(CampaignType)
    ];

    private static readonly List<Type> ConstantTypes =
    [
        typeof(ProfileTypes)
    ];

    public static async Task GenerateTypescriptFiles()
    {
        if (!DcdEnvironments.WriteTypescriptFiles)
        {
            return;
        }

        await WriteStringConstantFile();
        await WriteEnumConstantFile();
    }

    private static async Task WriteStringConstantFile()
    {
        foreach (var type in ConstantTypes)
        {
            var filePath = $"../../frontend/src/Models/{type.Name.ToLower()}.ts";

            var builder = new StringBuilder();

            builder.AppendLine("/* This file is autogenerated by the backend. Do not modify manually. */");
            builder.AppendLine();

            builder.AppendLine($"export enum {type.Name} {{");

            var constantValues = type.GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy)
                .Where(fi => fi is { IsLiteral: true, IsInitOnly: false } && fi.FieldType == typeof(string))
                .Select(x => (string)x.GetRawConstantValue()!)
                .OrderBy(x => x)
                .ToList();

            foreach (var constantValue in constantValues)
            {
                builder.AppendLine($"    {constantValue} = \"{constantValue}\",");
            }

            builder.AppendLine("}");

            await File.WriteAllTextAsync(filePath, builder.ToString());
        }
    }

    private static async Task WriteEnumConstantFile()
    {
        const string filePath = "../../frontend/src/Models/enums.ts";

        var builder = new StringBuilder();

        builder.AppendLine("/* This file is autogenerated by the backend. Do not modify manually. */");

        foreach (var enumType in EnumTypes)
        {
            builder.AppendLine();
            builder.AppendLine($"export enum {enumType.Name} {{");

            foreach (var enumValue in Enum.GetValues(enumType))
            {
                builder.AppendLine($"    {enumValue.ToString()} = {(int)enumValue},");
            }

            builder.AppendLine("}");
        }

        await File.WriteAllTextAsync(filePath, builder.ToString());
    }
}
