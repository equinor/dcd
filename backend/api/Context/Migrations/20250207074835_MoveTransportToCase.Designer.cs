// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DcdDbContext))]
    [Migration("20250207074835_MoveTransportToCase")]
    partial class MoveTransportToCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CampaignType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("RigMobDemobCost")
                        .HasColumnType("float");

                    b.Property<string>("RigMobDemobCostInternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RigMobDemobCostStartYear")
                        .HasColumnType("int");

                    b.Property<double>("RigUpgradingCost")
                        .HasColumnType("float");

                    b.Property<string>("RigUpgradingCostInternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RigUpgradingCostStartYear")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("APBODate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<DateTime>("BORDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("BreakEven")
                        .HasColumnType("float");

                    b.Property<double?>("BreakEvenOverride")
                        .HasColumnType("float");

                    b.Property<double>("CapexFactorFEEDStudies")
                        .HasColumnType("float");

                    b.Property<double>("CapexFactorFeasibilityStudies")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DG0Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DG1Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DG2Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DG3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DG4Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DGADate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DGBDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DGCDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DrainageStrategyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExplorationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FacilitiesAvailability")
                        .HasColumnType("float");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NPV")
                        .HasColumnType("float");

                    b.Property<double?>("NPVOverride")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OnshorePowerSupplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductionStrategyOverview")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ReferenceCase")
                        .HasColumnType("bit");

                    b.Property<string>("SharepointFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharepointFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharepointFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubstructureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopsideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VPBODate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExplorationId");

                    b.HasIndex("OnshorePowerSupplyId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WellProjectId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("api.Models.DevelopmentOperationalWellCosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AnnualWellInterventionCostPerWell")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("PluggingAndAbandonment")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RigMobDemob")
                        .HasColumnType("float");

                    b.Property<double>("RigUpgrading")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("DevelopmentOperationalWellCosts");
                });

            modelBuilder.Entity("api.Models.DevelopmentWell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WellProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("WellId");

                    b.HasIndex("WellProjectId", "WellId")
                        .IsUnique();

                    b.ToTable("DevelopmentWells");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<int>("GasSolution")
                        .HasColumnType("int");

                    b.Property<double>("NGLYield")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("DrainageStrategies");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RigMobDemob")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Explorations");
                });

            modelBuilder.Entity("api.Models.ExplorationOperationalWellCosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AppraisalProjectDrillingCosts")
                        .HasColumnType("float");

                    b.Property<double>("AppraisalRigMobDemob")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("ExplorationProjectDrillingCosts")
                        .HasColumnType("float");

                    b.Property<double>("ExplorationRigMobDemob")
                        .HasColumnType("float");

                    b.Property<double>("ExplorationRigUpgrading")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ExplorationOperationalWellCosts");
                });

            modelBuilder.Entity("api.Models.ExplorationWell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExplorationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WellId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("WellId");

                    b.HasIndex("ExplorationId", "WellId")
                        .IsUnique();

                    b.ToTable("ExplorationWell");
                });

            modelBuilder.Entity("api.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("api.Models.Infrastructure.BackgroundJobs.BackgroundJobLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExecutionDurationInMilliseconds")
                        .HasColumnType("bigint");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TimestampUtc");

                    b.ToTable("BackgroundJobLogs");
                });

            modelBuilder.Entity("api.Models.Infrastructure.BackgroundJobs.BackgroundJobMachineInstanceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsJobRunner")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeenUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BackgroundJobMachineInstanceLogs");
                });

            modelBuilder.Entity("api.Models.Infrastructure.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityName");

                    b.HasIndex("PropertyName");

                    b.HasIndex("TimestampUtc");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("api.Models.Infrastructure.ExceptionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DisplayUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HttpStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("InnerExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerExceptionStackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UtcTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UtcTimestamp");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("api.Models.Infrastructure.ProjectRecalculation.CompletedRecalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalculationLengthInMilliseconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CompletedRecalculations");
                });

            modelBuilder.Entity("api.Models.Infrastructure.ProjectRecalculation.PendingRecalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PendingRecalculations");
                });

            modelBuilder.Entity("api.Models.Infrastructure.RequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RequestEndUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequestLengthInMilliseconds")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RequestStartUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Verb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestStartUtc");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("api.Models.OnshorePowerSupply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DG3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DG4Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProspVersion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("OnshorePowerSupplies");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageDevelopmentDrillingDays")
                        .HasColumnType("float");

                    b.Property<double>("CO2EmissionFromFuelGas")
                        .HasColumnType("float");

                    b.Property<double>("CO2EmissionsFromFlaredGas")
                        .HasColumnType("float");

                    b.Property<double>("CO2RemovedFromGas")
                        .HasColumnType("float");

                    b.Property<double>("CO2Vented")
                        .HasColumnType("float");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<Guid>("CommonLibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommonLibraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double>("DailyEmissionFromDrillingRig")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<double>("ExchangeRateUSDToNOK")
                        .HasColumnType("float");

                    b.Property<double>("FlaredGasPerProducedVolume")
                        .HasColumnType("float");

                    b.Property<Guid>("FusionProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("GasPriceNOK")
                        .HasColumnType("float");

                    b.Property<int>("InternalProjectPhase")
                        .HasColumnType("int");

                    b.Property<bool>("IsRevision")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NpvYear")
                        .HasColumnType("int");

                    b.Property<double>("OilPriceUSD")
                        .HasColumnType("float");

                    b.Property<Guid?>("OriginalProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhysicalUnit")
                        .HasColumnType("int");

                    b.Property<int>("ProjectCategory")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPhase")
                        .HasColumnType("int");

                    b.Property<Guid>("ReferenceCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SharepointSiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FusionProjectId");

                    b.HasIndex("OriginalProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("api.Models.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FromOrgChart")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("api.Models.RevisionDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Arena")
                        .HasColumnType("bit");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Mdqc")
                        .HasColumnType("bit");

                    b.Property<Guid>("RevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RevisionId")
                        .IsUnique();

                    b.ToTable("RevisionDetails");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Concept")
                        .HasColumnType("int");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DG3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DG4Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DryWeight")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProspVersion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("Substructures");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CessationCost")
                        .HasColumnType("float");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DG3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DG4Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<double>("InfieldPipelineSystemLength")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductionFlowline")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProspVersion")
                        .HasColumnType("datetime2");

                    b.Property<int>("RiserCount")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("TemplateCount")
                        .HasColumnType("int");

                    b.Property<double>("UmbilicalSystemLength")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("Surfs");
                });

            modelBuilder.Entity("api.Models.TimeSeriesProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseId", "ProfileType")
                        .IsUnique();

                    b.ToTable("TimeSeriesProfiles");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<double>("CO2OnMaxGasProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2OnMaxOilProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2OnMaxWaterInjectionProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareGasProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareOilProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareWaterInjectionProfile")
                        .HasColumnType("float");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DG3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DG4Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DryWeight")
                        .HasColumnType("float");

                    b.Property<double>("FacilityOpex")
                        .HasColumnType("float");

                    b.Property<double>("FlaredGas")
                        .HasColumnType("float");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<double>("GasCapacity")
                        .HasColumnType("float");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OilCapacity")
                        .HasColumnType("float");

                    b.Property<double>("PeakElectricityImported")
                        .HasColumnType("float");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProspVersion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("WaterInjectionCapacity")
                        .HasColumnType("float");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("Topsides");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DG3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DG4Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("GasExportPipelineLength")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OilExportPipelineLength")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ProspVersion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseId")
                        .IsUnique();

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("api.Models.Well", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("DrillingDays")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PlugingAndAbandonmentCost")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("WellCategory")
                        .HasColumnType("int");

                    b.Property<double>("WellCost")
                        .HasColumnType("float");

                    b.Property<double>("WellInterventionCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WellProjects");
                });

            modelBuilder.Entity("api.Models.Campaign", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithMany("Campaigns")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithMany()
                        .HasForeignKey("ExplorationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.OnshorePowerSupply", "OnshorePowerSupply")
                        .WithMany()
                        .HasForeignKey("OnshorePowerSupplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Cases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithMany()
                        .HasForeignKey("WellProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exploration");

                    b.Navigation("OnshorePowerSupply");

                    b.Navigation("Project");

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.DevelopmentOperationalWellCosts", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithOne("DevelopmentOperationalWellCosts")
                        .HasForeignKey("api.Models.DevelopmentOperationalWellCosts", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.DevelopmentWell", b =>
                {
                    b.HasOne("api.Models.Campaign", "Campaign")
                        .WithMany("DevelopmentWells")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Well", "Well")
                        .WithMany("DevelopmentWells")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithMany("DevelopmentWells")
                        .HasForeignKey("WellProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Well");

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("DrainageStrategy")
                        .HasForeignKey("api.Models.DrainageStrategy", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Explorations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.ExplorationOperationalWellCosts", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithOne("ExplorationOperationalWellCosts")
                        .HasForeignKey("api.Models.ExplorationOperationalWellCosts", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.ExplorationWell", b =>
                {
                    b.HasOne("api.Models.Campaign", "Campaign")
                        .WithMany("ExplorationWells")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithMany("ExplorationWells")
                        .HasForeignKey("ExplorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Well", "Well")
                        .WithMany("ExplorationWells")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Exploration");

                    b.Navigation("Well");
                });

            modelBuilder.Entity("api.Models.Image", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithMany("Images")
                        .HasForeignKey("CaseId");

                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.OnshorePowerSupply", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("OnshorePowerSupplies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.HasOne("api.Models.Project", "OriginalProject")
                        .WithMany("Revisions")
                        .HasForeignKey("OriginalProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OriginalProject");
                });

            modelBuilder.Entity("api.Models.ProjectMember", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.RevisionDetails", b =>
                {
                    b.HasOne("api.Models.Project", "Revision")
                        .WithOne("RevisionDetails")
                        .HasForeignKey("api.Models.RevisionDetails", "RevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Revision");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("Substructure")
                        .HasForeignKey("api.Models.Substructure", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("Surf")
                        .HasForeignKey("api.Models.Surf", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.TimeSeriesProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithMany("TimeSeriesProfiles")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("Topside")
                        .HasForeignKey("api.Models.Topside", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("Transport")
                        .HasForeignKey("api.Models.Transport", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Well", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Wells")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("WellProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Campaign", b =>
                {
                    b.Navigation("DevelopmentWells");

                    b.Navigation("ExplorationWells");
                });

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("DrainageStrategy")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("Substructure")
                        .IsRequired();

                    b.Navigation("Surf")
                        .IsRequired();

                    b.Navigation("TimeSeriesProfiles");

                    b.Navigation("Topside")
                        .IsRequired();

                    b.Navigation("Transport")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.Navigation("ExplorationWells");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("DevelopmentOperationalWellCosts")
                        .IsRequired();

                    b.Navigation("ExplorationOperationalWellCosts")
                        .IsRequired();

                    b.Navigation("Explorations");

                    b.Navigation("Images");

                    b.Navigation("OnshorePowerSupplies");

                    b.Navigation("ProjectMembers");

                    b.Navigation("RevisionDetails");

                    b.Navigation("Revisions");

                    b.Navigation("WellProjects");

                    b.Navigation("Wells");
                });

            modelBuilder.Entity("api.Models.Well", b =>
                {
                    b.Navigation("DevelopmentWells");

                    b.Navigation("ExplorationWells");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.Navigation("DevelopmentWells");
                });
#pragma warning restore 612, 618
        }
    }
}
