// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DcdDbContext))]
    [Migration("20241010104936_internalprojectphase")]
    partial class internalprojectphase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.AdditionalOPEXCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("AdditionalOPEXCostProfile");
                });

            modelBuilder.Entity("api.Models.AdditionalProductionProfileGas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("AdditionalProductionProfileGas");
                });

            modelBuilder.Entity("api.Models.AdditionalProductionProfileOil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("AdditionalProductionProfileOil");
                });

            modelBuilder.Entity("api.Models.AppraisalWellCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("AppraisalWellCostProfile");
                });

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("APXDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("APZDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<double>("BreakEven")
                        .HasColumnType("float");

                    b.Property<double>("CapexFactorFEEDStudies")
                        .HasColumnType("float");

                    b.Property<double>("CapexFactorFeasibilityStudies")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG0Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG1Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG2Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG3Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG4Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DGADate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DGBDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DGCDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DrainageStrategyLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExplorationLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FacilitiesAvailability")
                        .HasColumnType("float");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifyTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("NPV")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductionStrategyOverview")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ReferenceCase")
                        .HasColumnType("bit");

                    b.Property<string>("SharepointFileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharepointFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharepointFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubstructureLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurfLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopsideLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProjectLink")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategyLink");

                    b.HasIndex("ExplorationLink");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubstructureLink");

                    b.HasIndex("SurfLink");

                    b.HasIndex("TopsideLink");

                    b.HasIndex("TransportLink");

                    b.HasIndex("WellProjectLink");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("api.Models.CessationOffshoreFacilitiesCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("CessationOffshoreFacilitiesCost");
                });

            modelBuilder.Entity("api.Models.CessationOffshoreFacilitiesCostOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("CessationOffshoreFacilitiesCostOverride");
                });

            modelBuilder.Entity("api.Models.CessationOnshoreFacilitiesCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("CessationOnshoreFacilitiesCostProfile");
                });

            modelBuilder.Entity("api.Models.CessationWellsCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("CessationWellsCost");
                });

            modelBuilder.Entity("api.Models.CessationWellsCostOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("CessationWellsCostOverride");
                });

            modelBuilder.Entity("api.Models.Co2Emissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("Co2Emissions");
                });

            modelBuilder.Entity("api.Models.Co2EmissionsOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("Co2EmissionsOverride");
                });

            modelBuilder.Entity("api.Models.CountryOfficeCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("CountryOfficeCost");
                });

            modelBuilder.Entity("api.Models.DeferredGasProduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("DeferredGasProduction");
                });

            modelBuilder.Entity("api.Models.DeferredOilProduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("DeferredOilProduction");
                });

            modelBuilder.Entity("api.Models.DevelopmentOperationalWellCosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AnnualWellInterventionCostPerWell")
                        .HasColumnType("float");

                    b.Property<double>("PluggingAndAbandonment")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RigMobDemob")
                        .HasColumnType("float");

                    b.Property<double>("RigUpgrading")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("DevelopmentOperationalWellCosts");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<int>("GasSolution")
                        .HasColumnType("int");

                    b.Property<double>("NGLYield")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("DrainageStrategies");
                });

            modelBuilder.Entity("api.Models.DrillingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DrillingSchedule");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RigMobDemob")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Explorations");
                });

            modelBuilder.Entity("api.Models.ExplorationOperationalWellCosts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AppraisalProjectDrillingCosts")
                        .HasColumnType("float");

                    b.Property<double>("AppraisalRigMobDemob")
                        .HasColumnType("float");

                    b.Property<double>("ExplorationProjectDrillingCosts")
                        .HasColumnType("float");

                    b.Property<double>("ExplorationRigMobDemob")
                        .HasColumnType("float");

                    b.Property<double>("ExplorationRigUpgrading")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ExplorationOperationalWellCosts");
                });

            modelBuilder.Entity("api.Models.ExplorationWell", b =>
                {
                    b.Property<Guid>("ExplorationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrillingScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExplorationId", "WellId");

                    b.HasIndex("DrillingScheduleId");

                    b.HasIndex("WellId");

                    b.ToTable("ExplorationWell");
                });

            modelBuilder.Entity("api.Models.ExplorationWellCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("ExplorationWellCostProfile");
                });

            modelBuilder.Entity("api.Models.FuelFlaringAndLosses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("FuelFlaringAndLosses");
                });

            modelBuilder.Entity("api.Models.FuelFlaringAndLossesOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("FuelFlaringAndLossesOverride");
                });

            modelBuilder.Entity("api.Models.GAndGAdminCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("GAndGAdminCost");
                });

            modelBuilder.Entity("api.Models.GAndGAdminCostOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("GAndGAdminCostOverride");
                });

            modelBuilder.Entity("api.Models.GasInjectorCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("GasInjectorCostProfile");
                });

            modelBuilder.Entity("api.Models.GasInjectorCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("GasInjectorCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.GasProducerCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("GasProducerCostProfile");
                });

            modelBuilder.Entity("api.Models.GasProducerCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("GasProducerCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.HistoricCostCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("HistoricCostCostProfile");
                });

            modelBuilder.Entity("api.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("api.Models.ImportedElectricity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ImportedElectricity");
                });

            modelBuilder.Entity("api.Models.ImportedElectricityOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ImportedElectricityOverride");
                });

            modelBuilder.Entity("api.Models.NetSalesGas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("NetSalesGas");
                });

            modelBuilder.Entity("api.Models.NetSalesGasOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("NetSalesGasOverride");
                });

            modelBuilder.Entity("api.Models.OffshoreFacilitiesOperationsCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("OffshoreFacilitiesOperationsCostProfile");
                });

            modelBuilder.Entity("api.Models.OffshoreFacilitiesOperationsCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("OffshoreFacilitiesOperationsCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.OilProducerCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("OilProducerCostProfile");
                });

            modelBuilder.Entity("api.Models.OilProducerCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("OilProducerCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.OnshoreRelatedOPEXCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("OnshoreRelatedOPEXCostProfile");
                });

            modelBuilder.Entity("api.Models.ProductionProfileGas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileGas");
                });

            modelBuilder.Entity("api.Models.ProductionProfileNGL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileNGL");
                });

            modelBuilder.Entity("api.Models.ProductionProfileOil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileOil");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWater", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileWater");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWaterInjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileWaterInjection");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageDevelopmentDrillingDays")
                        .HasColumnType("float");

                    b.Property<double>("CO2EmissionFromFuelGas")
                        .HasColumnType("float");

                    b.Property<double>("CO2EmissionsFromFlaredGas")
                        .HasColumnType("float");

                    b.Property<double>("CO2RemovedFromGas")
                        .HasColumnType("float");

                    b.Property<double>("CO2Vented")
                        .HasColumnType("float");

                    b.Property<int>("Classification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("CommonLibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommonLibraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double>("DailyEmissionFromDrillingRig")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DiscountRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(8.0);

                    b.Property<double>("ExchangeRateUSDToNOK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(10.0);

                    b.Property<double>("FlaredGasPerProducedVolume")
                        .HasColumnType("float");

                    b.Property<Guid>("FusionProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("GasPriceNOK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(3.0);

                    b.Property<int>("InternalProjectPhase")
                        .HasColumnType("int");

                    b.Property<bool>("IsRevision")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifyTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OilPriceUSD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(75.0);

                    b.Property<Guid?>("OriginalProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhysicalUnit")
                        .HasColumnType("int");

                    b.Property<int>("ProjectCategory")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPhase")
                        .HasColumnType("int");

                    b.Property<Guid>("ReferenceCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SharepointSiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FusionProjectId")
                        .HasDatabaseName("IX_Project_FusionProjectId");

                    b.HasIndex("OriginalProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("api.Models.SeismicAcquisitionAndProcessing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("SeismicAcquisitionAndProcessing");
                });

            modelBuilder.Entity("api.Models.SidetrackCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("SidetrackCostProfile");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Concept")
                        .HasColumnType("int");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DG3Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DG4Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("DryWeight")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("LastChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProspVersion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Substructures");
                });

            modelBuilder.Entity("api.Models.SubstructureCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Substructure.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Substructure.Id")
                        .IsUnique();

                    b.ToTable("SubstructureCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.SubstructureCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Substructure.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Substructure.Id")
                        .IsUnique();

                    b.ToTable("SubstructureCostProfiles");
                });

            modelBuilder.Entity("api.Models.SubstructureCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Substructure.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Substructure.Id")
                        .IsUnique();

                    b.ToTable("SubstructureCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<double>("CessationCost")
                        .HasColumnType("float");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DG3Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DG4Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<double>("InfieldPipelineSystemLength")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("LastChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductionFlowline")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProspVersion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RiserCount")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("TemplateCount")
                        .HasColumnType("int");

                    b.Property<double>("UmbilicalSystemLength")
                        .HasColumnType("float");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Surfs");
                });

            modelBuilder.Entity("api.Models.SurfCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Surf.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Surf.Id")
                        .IsUnique();

                    b.ToTable("SurfCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.SurfCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Surf.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Surf.Id")
                        .IsUnique();

                    b.ToTable("SurfCostProfile");
                });

            modelBuilder.Entity("api.Models.SurfCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Surf.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Surf.Id")
                        .IsUnique();

                    b.ToTable("SurfCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<double>("CO2OnMaxGasProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2OnMaxOilProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2OnMaxWaterInjectionProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareGasProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareOilProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareWaterInjectionProfile")
                        .HasColumnType("float");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DG3Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DG4Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("DryWeight")
                        .HasColumnType("float");

                    b.Property<double>("FacilityOpex")
                        .HasColumnType("float");

                    b.Property<double>("FlaredGas")
                        .HasColumnType("float");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<double>("GasCapacity")
                        .HasColumnType("float");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OilCapacity")
                        .HasColumnType("float");

                    b.Property<double>("PeakElectricityImported")
                        .HasColumnType("float");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProspVersion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<double>("WaterInjectionCapacity")
                        .HasColumnType("float");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Topsides");
                });

            modelBuilder.Entity("api.Models.TopsideCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Topside.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Topside.Id")
                        .IsUnique();

                    b.ToTable("TopsideCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.TopsideCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Topside.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Topside.Id")
                        .IsUnique();

                    b.ToTable("TopsideCostProfiles");
                });

            modelBuilder.Entity("api.Models.TopsideCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Topside.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Topside.Id")
                        .IsUnique();

                    b.ToTable("TopsideCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.TotalFEEDStudies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("TotalFEEDStudies");
                });

            modelBuilder.Entity("api.Models.TotalFEEDStudiesOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("TotalFEEDStudiesOverride");
                });

            modelBuilder.Entity("api.Models.TotalFeasibilityAndConceptStudies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("TotalFeasibilityAndConceptStudies");
                });

            modelBuilder.Entity("api.Models.TotalFeasibilityAndConceptStudiesOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("TotalFeasibilityAndConceptStudiesOverride");
                });

            modelBuilder.Entity("api.Models.TotalOtherStudiesCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("TotalOtherStudiesCostProfile");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DG3Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DG4Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("GasExportPipelineLength")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("LastChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OilExportPipelineLength")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProspVersion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("api.Models.TransportCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Transport.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Transport.Id")
                        .IsUnique();

                    b.ToTable("TransportCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.TransportCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Transport.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Transport.Id")
                        .IsUnique();

                    b.ToTable("TransportCostProfile");
                });

            modelBuilder.Entity("api.Models.TransportCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Transport.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Transport.Id")
                        .IsUnique();

                    b.ToTable("TransportCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.WaterInjectorCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("WaterInjectorCostProfile");
                });

            modelBuilder.Entity("api.Models.WaterInjectorCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("WaterInjectorCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.Well", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DrillingDays")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PlugingAndAbandonmentCost")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WellCategory")
                        .HasColumnType("int");

                    b.Property<double>("WellCost")
                        .HasColumnType("float");

                    b.Property<double>("WellInterventionCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Wells");
                });

            modelBuilder.Entity("api.Models.WellInterventionCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("WellInterventionCostProfile");
                });

            modelBuilder.Entity("api.Models.WellInterventionCostProfileOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Case.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Override")
                        .HasColumnType("bit");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Case.Id")
                        .IsUnique();

                    b.ToTable("WellInterventionCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WellProjects");
                });

            modelBuilder.Entity("api.Models.WellProjectWell", b =>
                {
                    b.Property<Guid>("WellProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrillingScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WellProjectId", "WellId");

                    b.HasIndex("DrillingScheduleId");

                    b.HasIndex("WellId");

                    b.ToTable("WellProjectWell");
                });

            modelBuilder.Entity("api.Models.AdditionalOPEXCostProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("AdditionalOPEXCostProfile")
                        .HasForeignKey("api.Models.AdditionalOPEXCostProfile", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.AdditionalProductionProfileGas", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("AdditionalProductionProfileGas")
                        .HasForeignKey("api.Models.AdditionalProductionProfileGas", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.AdditionalProductionProfileOil", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("AdditionalProductionProfileOil")
                        .HasForeignKey("api.Models.AdditionalProductionProfileOil", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.AppraisalWellCostProfile", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("AppraisalWellCostProfile")
                        .HasForeignKey("api.Models.AppraisalWellCostProfile", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithMany()
                        .HasForeignKey("DrainageStrategyLink")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithMany()
                        .HasForeignKey("ExplorationLink")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Cases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Substructure", "Substructure")
                        .WithMany()
                        .HasForeignKey("SubstructureLink")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Surf", "Surf")
                        .WithMany()
                        .HasForeignKey("SurfLink")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Topside", "Topside")
                        .WithMany()
                        .HasForeignKey("TopsideLink")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("TransportLink")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithMany()
                        .HasForeignKey("WellProjectLink")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");

                    b.Navigation("Exploration");

                    b.Navigation("Project");

                    b.Navigation("Substructure");

                    b.Navigation("Surf");

                    b.Navigation("Topside");

                    b.Navigation("Transport");

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.CessationOffshoreFacilitiesCost", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("CessationOffshoreFacilitiesCost")
                        .HasForeignKey("api.Models.CessationOffshoreFacilitiesCost", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.CessationOffshoreFacilitiesCostOverride", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("CessationOffshoreFacilitiesCostOverride")
                        .HasForeignKey("api.Models.CessationOffshoreFacilitiesCostOverride", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.CessationOnshoreFacilitiesCostProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("CessationOnshoreFacilitiesCostProfile")
                        .HasForeignKey("api.Models.CessationOnshoreFacilitiesCostProfile", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.CessationWellsCost", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("CessationWellsCost")
                        .HasForeignKey("api.Models.CessationWellsCost", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.CessationWellsCostOverride", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("CessationWellsCostOverride")
                        .HasForeignKey("api.Models.CessationWellsCostOverride", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Co2Emissions", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("Co2Emissions")
                        .HasForeignKey("api.Models.Co2Emissions", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.Co2EmissionsOverride", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("Co2EmissionsOverride")
                        .HasForeignKey("api.Models.Co2EmissionsOverride", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.CountryOfficeCost", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("CountryOfficeCost")
                        .HasForeignKey("api.Models.CountryOfficeCost", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.DeferredGasProduction", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("DeferredGasProduction")
                        .HasForeignKey("api.Models.DeferredGasProduction", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.DeferredOilProduction", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("DeferredOilProduction")
                        .HasForeignKey("api.Models.DeferredOilProduction", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.DevelopmentOperationalWellCosts", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithOne("DevelopmentOperationalWellCosts")
                        .HasForeignKey("api.Models.DevelopmentOperationalWellCosts", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("DrainageStrategies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Explorations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.ExplorationOperationalWellCosts", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithOne("ExplorationOperationalWellCosts")
                        .HasForeignKey("api.Models.ExplorationOperationalWellCosts", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.ExplorationWell", b =>
                {
                    b.HasOne("api.Models.DrillingSchedule", "DrillingSchedule")
                        .WithMany()
                        .HasForeignKey("DrillingScheduleId");

                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithMany("ExplorationWells")
                        .HasForeignKey("ExplorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Well", "Well")
                        .WithMany("ExplorationWells")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DrillingSchedule");

                    b.Navigation("Exploration");

                    b.Navigation("Well");
                });

            modelBuilder.Entity("api.Models.ExplorationWellCostProfile", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("ExplorationWellCostProfile")
                        .HasForeignKey("api.Models.ExplorationWellCostProfile", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.FuelFlaringAndLosses", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("FuelFlaringAndLosses")
                        .HasForeignKey("api.Models.FuelFlaringAndLosses", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.FuelFlaringAndLossesOverride", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("FuelFlaringAndLossesOverride")
                        .HasForeignKey("api.Models.FuelFlaringAndLossesOverride", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.GAndGAdminCost", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("GAndGAdminCost")
                        .HasForeignKey("api.Models.GAndGAdminCost", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.GAndGAdminCostOverride", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("GAndGAdminCostOverride")
                        .HasForeignKey("api.Models.GAndGAdminCostOverride", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.GasInjectorCostProfile", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("GasInjectorCostProfile")
                        .HasForeignKey("api.Models.GasInjectorCostProfile", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.GasInjectorCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("GasInjectorCostProfileOverride")
                        .HasForeignKey("api.Models.GasInjectorCostProfileOverride", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.GasProducerCostProfile", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("GasProducerCostProfile")
                        .HasForeignKey("api.Models.GasProducerCostProfile", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.GasProducerCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("GasProducerCostProfileOverride")
                        .HasForeignKey("api.Models.GasProducerCostProfileOverride", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.HistoricCostCostProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("HistoricCostCostProfile")
                        .HasForeignKey("api.Models.HistoricCostCostProfile", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Image", b =>
                {
                    b.HasOne("api.Models.Case", null)
                        .WithMany("Images")
                        .HasForeignKey("CaseId");
                });

            modelBuilder.Entity("api.Models.ImportedElectricity", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ImportedElectricity")
                        .HasForeignKey("api.Models.ImportedElectricity", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ImportedElectricityOverride", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ImportedElectricityOverride")
                        .HasForeignKey("api.Models.ImportedElectricityOverride", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.NetSalesGas", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("NetSalesGas")
                        .HasForeignKey("api.Models.NetSalesGas", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.NetSalesGasOverride", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("NetSalesGasOverride")
                        .HasForeignKey("api.Models.NetSalesGasOverride", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.OffshoreFacilitiesOperationsCostProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("OffshoreFacilitiesOperationsCostProfile")
                        .HasForeignKey("api.Models.OffshoreFacilitiesOperationsCostProfile", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.OffshoreFacilitiesOperationsCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("OffshoreFacilitiesOperationsCostProfileOverride")
                        .HasForeignKey("api.Models.OffshoreFacilitiesOperationsCostProfileOverride", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.OilProducerCostProfile", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("OilProducerCostProfile")
                        .HasForeignKey("api.Models.OilProducerCostProfile", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.OilProducerCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("OilProducerCostProfileOverride")
                        .HasForeignKey("api.Models.OilProducerCostProfileOverride", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.OnshoreRelatedOPEXCostProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("OnshoreRelatedOPEXCostProfile")
                        .HasForeignKey("api.Models.OnshoreRelatedOPEXCostProfile", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.ProductionProfileGas", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileGas")
                        .HasForeignKey("api.Models.ProductionProfileGas", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileNGL", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileNGL")
                        .HasForeignKey("api.Models.ProductionProfileNGL", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileOil", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileOil")
                        .HasForeignKey("api.Models.ProductionProfileOil", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWater", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileWater")
                        .HasForeignKey("api.Models.ProductionProfileWater", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWaterInjection", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileWaterInjection")
                        .HasForeignKey("api.Models.ProductionProfileWaterInjection", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.HasOne("api.Models.Project", "OriginalProject")
                        .WithMany("Revisions")
                        .HasForeignKey("OriginalProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OriginalProject");
                });

            modelBuilder.Entity("api.Models.SeismicAcquisitionAndProcessing", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("SeismicAcquisitionAndProcessing")
                        .HasForeignKey("api.Models.SeismicAcquisitionAndProcessing", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.SidetrackCostProfile", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("SidetrackCostProfile")
                        .HasForeignKey("api.Models.SidetrackCostProfile", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Substructures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.SubstructureCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Substructure", "Substructure")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.SubstructureCessationCostProfile", "Substructure.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Substructure");
                });

            modelBuilder.Entity("api.Models.SubstructureCostProfile", b =>
                {
                    b.HasOne("api.Models.Substructure", "Substructure")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.SubstructureCostProfile", "Substructure.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Substructure");
                });

            modelBuilder.Entity("api.Models.SubstructureCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.Substructure", "Substructure")
                        .WithOne("CostProfileOverride")
                        .HasForeignKey("api.Models.SubstructureCostProfileOverride", "Substructure.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Substructure");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Surfs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.SurfCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Surf", "Surf")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.SurfCessationCostProfile", "Surf.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surf");
                });

            modelBuilder.Entity("api.Models.SurfCostProfile", b =>
                {
                    b.HasOne("api.Models.Surf", "Surf")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.SurfCostProfile", "Surf.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surf");
                });

            modelBuilder.Entity("api.Models.SurfCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.Surf", "Surf")
                        .WithOne("CostProfileOverride")
                        .HasForeignKey("api.Models.SurfCostProfileOverride", "Surf.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surf");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Topsides")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.TopsideCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Topside", "Topside")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.TopsideCessationCostProfile", "Topside.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topside");
                });

            modelBuilder.Entity("api.Models.TopsideCostProfile", b =>
                {
                    b.HasOne("api.Models.Topside", "Topside")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.TopsideCostProfile", "Topside.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topside");
                });

            modelBuilder.Entity("api.Models.TopsideCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.Topside", "Topside")
                        .WithOne("CostProfileOverride")
                        .HasForeignKey("api.Models.TopsideCostProfileOverride", "Topside.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topside");
                });

            modelBuilder.Entity("api.Models.TotalFEEDStudies", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("TotalFEEDStudies")
                        .HasForeignKey("api.Models.TotalFEEDStudies", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.TotalFEEDStudiesOverride", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("TotalFEEDStudiesOverride")
                        .HasForeignKey("api.Models.TotalFEEDStudiesOverride", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.TotalFeasibilityAndConceptStudies", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("TotalFeasibilityAndConceptStudies")
                        .HasForeignKey("api.Models.TotalFeasibilityAndConceptStudies", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.TotalFeasibilityAndConceptStudiesOverride", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("TotalFeasibilityAndConceptStudiesOverride")
                        .HasForeignKey("api.Models.TotalFeasibilityAndConceptStudiesOverride", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.TotalOtherStudiesCostProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("TotalOtherStudiesCostProfile")
                        .HasForeignKey("api.Models.TotalOtherStudiesCostProfile", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Transports")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.TransportCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Transport", "Transport")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.TransportCessationCostProfile", "Transport.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("api.Models.TransportCostProfile", b =>
                {
                    b.HasOne("api.Models.Transport", "Transport")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.TransportCostProfile", "Transport.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("api.Models.TransportCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.Transport", "Transport")
                        .WithOne("CostProfileOverride")
                        .HasForeignKey("api.Models.TransportCostProfileOverride", "Transport.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("api.Models.WaterInjectorCostProfile", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("WaterInjectorCostProfile")
                        .HasForeignKey("api.Models.WaterInjectorCostProfile", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.WaterInjectorCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("WaterInjectorCostProfileOverride")
                        .HasForeignKey("api.Models.WaterInjectorCostProfileOverride", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.Well", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Wells")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.WellInterventionCostProfile", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("WellInterventionCostProfile")
                        .HasForeignKey("api.Models.WellInterventionCostProfile", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.WellInterventionCostProfileOverride", b =>
                {
                    b.HasOne("api.Models.Case", "Case")
                        .WithOne("WellInterventionCostProfileOverride")
                        .HasForeignKey("api.Models.WellInterventionCostProfileOverride", "Case.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("WellProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.WellProjectWell", b =>
                {
                    b.HasOne("api.Models.DrillingSchedule", "DrillingSchedule")
                        .WithMany()
                        .HasForeignKey("DrillingScheduleId");

                    b.HasOne("api.Models.Well", "Well")
                        .WithMany("WellProjectWells")
                        .HasForeignKey("WellId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithMany("WellProjectWells")
                        .HasForeignKey("WellProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrillingSchedule");

                    b.Navigation("Well");

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.Navigation("AdditionalOPEXCostProfile");

                    b.Navigation("CessationOffshoreFacilitiesCost");

                    b.Navigation("CessationOffshoreFacilitiesCostOverride");

                    b.Navigation("CessationOnshoreFacilitiesCostProfile");

                    b.Navigation("CessationWellsCost");

                    b.Navigation("CessationWellsCostOverride");

                    b.Navigation("HistoricCostCostProfile");

                    b.Navigation("Images");

                    b.Navigation("OffshoreFacilitiesOperationsCostProfile");

                    b.Navigation("OffshoreFacilitiesOperationsCostProfileOverride");

                    b.Navigation("OnshoreRelatedOPEXCostProfile");

                    b.Navigation("TotalFEEDStudies");

                    b.Navigation("TotalFEEDStudiesOverride");

                    b.Navigation("TotalFeasibilityAndConceptStudies");

                    b.Navigation("TotalFeasibilityAndConceptStudiesOverride");

                    b.Navigation("TotalOtherStudiesCostProfile");

                    b.Navigation("WellInterventionCostProfile");

                    b.Navigation("WellInterventionCostProfileOverride");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.Navigation("AdditionalProductionProfileGas");

                    b.Navigation("AdditionalProductionProfileOil");

                    b.Navigation("Co2Emissions");

                    b.Navigation("Co2EmissionsOverride");

                    b.Navigation("DeferredGasProduction");

                    b.Navigation("DeferredOilProduction");

                    b.Navigation("FuelFlaringAndLosses");

                    b.Navigation("FuelFlaringAndLossesOverride");

                    b.Navigation("ImportedElectricity");

                    b.Navigation("ImportedElectricityOverride");

                    b.Navigation("NetSalesGas");

                    b.Navigation("NetSalesGasOverride");

                    b.Navigation("ProductionProfileGas");

                    b.Navigation("ProductionProfileNGL");

                    b.Navigation("ProductionProfileOil");

                    b.Navigation("ProductionProfileWater");

                    b.Navigation("ProductionProfileWaterInjection");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.Navigation("AppraisalWellCostProfile");

                    b.Navigation("CountryOfficeCost");

                    b.Navigation("ExplorationWellCostProfile");

                    b.Navigation("ExplorationWells");

                    b.Navigation("GAndGAdminCost");

                    b.Navigation("GAndGAdminCostOverride");

                    b.Navigation("SeismicAcquisitionAndProcessing");

                    b.Navigation("SidetrackCostProfile");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("DevelopmentOperationalWellCosts");

                    b.Navigation("DrainageStrategies");

                    b.Navigation("ExplorationOperationalWellCosts");

                    b.Navigation("Explorations");

                    b.Navigation("Revisions");

                    b.Navigation("Substructures");

                    b.Navigation("Surfs");

                    b.Navigation("Topsides");

                    b.Navigation("Transports");

                    b.Navigation("WellProjects");

                    b.Navigation("Wells");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");

                    b.Navigation("CostProfileOverride");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");

                    b.Navigation("CostProfileOverride");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");

                    b.Navigation("CostProfileOverride");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");

                    b.Navigation("CostProfileOverride");
                });

            modelBuilder.Entity("api.Models.Well", b =>
                {
                    b.Navigation("ExplorationWells");

                    b.Navigation("WellProjectWells");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.Navigation("GasInjectorCostProfile");

                    b.Navigation("GasInjectorCostProfileOverride");

                    b.Navigation("GasProducerCostProfile");

                    b.Navigation("GasProducerCostProfileOverride");

                    b.Navigation("OilProducerCostProfile");

                    b.Navigation("OilProducerCostProfileOverride");

                    b.Navigation("WaterInjectorCostProfile");

                    b.Navigation("WaterInjectorCostProfileOverride");

                    b.Navigation("WellProjectWells");
                });
#pragma warning restore 612, 618
        }
    }
}
