// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DcdDbContext))]
    [Migration("20220525124534_prosp_migration")]
    partial class prosp_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG0Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG1Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG2Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG3Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DG4Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DrainageStrategyLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExplorationLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("FacilitiesAvailability")
                        .HasColumnType("float");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ModifyTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductionStrategyOverview")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ReferenceCase")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubstructureLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurfLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopsideLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProjectLink")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("api.Models.Co2Emissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("Co2Emissions");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<double>("NGLYield")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("DrainageStrategies");
                });

            modelBuilder.Entity("api.Models.DrillingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("DrillingSchedule");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RigMobDemob")
                        .HasColumnType("float");

                    b.Property<int>("WellType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Explorations");
                });

            modelBuilder.Entity("api.Models.ExplorationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("ExplorationCostProfile");
                });

            modelBuilder.Entity("api.Models.ExplorationDrillingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("ExplorationDrillingSchedule");
                });

            modelBuilder.Entity("api.Models.FuelFlaringAndLosses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("FuelFlaringAndLosses");
                });

            modelBuilder.Entity("api.Models.GAndGAdminCost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Exploration.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exploration.Id")
                        .IsUnique();

                    b.ToTable("GAndGAdminCost");
                });

            modelBuilder.Entity("api.Models.NetSalesGas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("NetSalesGas");
                });

            modelBuilder.Entity("api.Models.ProductionProfileGas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileGas");
                });

            modelBuilder.Entity("api.Models.ProductionProfileNGL", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileNGL");
                });

            modelBuilder.Entity("api.Models.ProductionProfileOil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileOil");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWater", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileWater");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWaterInjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrainageStrategy.Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrainageStrategy.Id")
                        .IsUnique();

                    b.ToTable("ProductionProfileWaterInjection");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommonLibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommonLibraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhysicalUnit")
                        .HasColumnType("int");

                    b.Property<int>("ProjectCategory")
                        .HasColumnType("int");

                    b.Property<int>("ProjectPhase")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double>("DryWeight")
                        .HasColumnType("float");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Substructures");
                });

            modelBuilder.Entity("api.Models.SubstructureCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Substructure.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Substructure.Id")
                        .IsUnique();

                    b.ToTable("SubstructureCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.SubstructureCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Substructure.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Substructure.Id")
                        .IsUnique();

                    b.ToTable("SubstructureCostProfiles");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("GasInjectorCount")
                        .HasColumnType("int");

                    b.Property<double>("InfieldPipelineSystemLength")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("LastChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductionFlowline")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProspVersion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RiserCount")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("TemplateCount")
                        .HasColumnType("int");

                    b.Property<double>("UmbilicalSystemLength")
                        .HasColumnType("float");

                    b.Property<int>("WaterInjectorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Surfs");
                });

            modelBuilder.Entity("api.Models.SurfCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Surf.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Surf.Id")
                        .IsUnique();

                    b.ToTable("SurfCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.SurfCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Surf.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Surf.Id")
                        .IsUnique();

                    b.ToTable("SurfCostProfile");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<double>("CO2OnMaxGasProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2OnMaxOilProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2OnMaxWaterInjectionProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareGasProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareOilProfile")
                        .HasColumnType("float");

                    b.Property<double>("CO2ShareWaterInjectionProfile")
                        .HasColumnType("float");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double>("DryWeight")
                        .HasColumnType("float");

                    b.Property<double>("FacilitiesAvailability")
                        .HasColumnType("float");

                    b.Property<double>("FlaredGas")
                        .HasColumnType("float");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("float");

                    b.Property<double>("GasCapacity")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("LastChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OilCapacity")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProspVersion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Topsides");
                });

            modelBuilder.Entity("api.Models.TopsideCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Topside.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Topside.Id")
                        .IsUnique();

                    b.ToTable("TopsideCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.TopsideCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Topside.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Topside.Id")
                        .IsUnique();

                    b.ToTable("TopsideCostProfiles");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostYear")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double>("GasExportPipelineLength")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("LastChangedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OilExportPipelineLength")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ProspVersion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("api.Models.TransportCessationCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Transport.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Transport.Id")
                        .IsUnique();

                    b.ToTable("TransportCessationCostProfiles");
                });

            modelBuilder.Entity("api.Models.TransportCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("Transport.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Transport.Id")
                        .IsUnique();

                    b.ToTable("TransportCostProfile");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AnnualWellInterventionCost")
                        .HasColumnType("float");

                    b.Property<int>("ArtificialLift")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PluggingAndAbandonment")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RigMobDemob")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("WellProjects");
                });

            modelBuilder.Entity("api.Models.WellProjectCostProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("EPAVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<Guid>("WellProject.Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WellProject.Id")
                        .IsUnique();

                    b.ToTable("WellProjectCostProfile");
                });

            modelBuilder.Entity("api.Models.Case", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Cases")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.Co2Emissions", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("Co2Emissions")
                        .HasForeignKey("api.Models.Co2Emissions", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("DrainageStrategies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.DrillingSchedule", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("DrillingSchedule")
                        .HasForeignKey("api.Models.DrillingSchedule", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Explorations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.ExplorationCostProfile", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.ExplorationCostProfile", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.ExplorationDrillingSchedule", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("DrillingSchedule")
                        .HasForeignKey("api.Models.ExplorationDrillingSchedule", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.FuelFlaringAndLosses", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("FuelFlaringAndLosses")
                        .HasForeignKey("api.Models.FuelFlaringAndLosses", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.GAndGAdminCost", b =>
                {
                    b.HasOne("api.Models.Exploration", "Exploration")
                        .WithOne("GAndGAdminCost")
                        .HasForeignKey("api.Models.GAndGAdminCost", "Exploration.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploration");
                });

            modelBuilder.Entity("api.Models.NetSalesGas", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("NetSalesGas")
                        .HasForeignKey("api.Models.NetSalesGas", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileGas", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileGas")
                        .HasForeignKey("api.Models.ProductionProfileGas", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileNGL", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileNGL")
                        .HasForeignKey("api.Models.ProductionProfileNGL", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileOil", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileOil")
                        .HasForeignKey("api.Models.ProductionProfileOil", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWater", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileWater")
                        .HasForeignKey("api.Models.ProductionProfileWater", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.ProductionProfileWaterInjection", b =>
                {
                    b.HasOne("api.Models.DrainageStrategy", "DrainageStrategy")
                        .WithOne("ProductionProfileWaterInjection")
                        .HasForeignKey("api.Models.ProductionProfileWaterInjection", "DrainageStrategy.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrainageStrategy");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Substructures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.SubstructureCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Substructure", "Substructure")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.SubstructureCessationCostProfile", "Substructure.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Substructure");
                });

            modelBuilder.Entity("api.Models.SubstructureCostProfile", b =>
                {
                    b.HasOne("api.Models.Substructure", "Substructure")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.SubstructureCostProfile", "Substructure.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Substructure");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Surfs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.SurfCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Surf", "Surf")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.SurfCessationCostProfile", "Surf.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surf");
                });

            modelBuilder.Entity("api.Models.SurfCostProfile", b =>
                {
                    b.HasOne("api.Models.Surf", "Surf")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.SurfCostProfile", "Surf.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surf");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Topsides")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.TopsideCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Topside", "Topside")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.TopsideCessationCostProfile", "Topside.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topside");
                });

            modelBuilder.Entity("api.Models.TopsideCostProfile", b =>
                {
                    b.HasOne("api.Models.Topside", "Topside")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.TopsideCostProfile", "Topside.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topside");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("Transports")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.TransportCessationCostProfile", b =>
                {
                    b.HasOne("api.Models.Transport", "Transport")
                        .WithOne("CessationCostProfile")
                        .HasForeignKey("api.Models.TransportCessationCostProfile", "Transport.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("api.Models.TransportCostProfile", b =>
                {
                    b.HasOne("api.Models.Transport", "Transport")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.TransportCostProfile", "Transport.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.HasOne("api.Models.Project", "Project")
                        .WithMany("WellProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("api.Models.WellProjectCostProfile", b =>
                {
                    b.HasOne("api.Models.WellProject", "WellProject")
                        .WithOne("CostProfile")
                        .HasForeignKey("api.Models.WellProjectCostProfile", "WellProject.Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellProject");
                });

            modelBuilder.Entity("api.Models.DrainageStrategy", b =>
                {
                    b.Navigation("Co2Emissions");

                    b.Navigation("FuelFlaringAndLosses");

                    b.Navigation("NetSalesGas");

                    b.Navigation("ProductionProfileGas");

                    b.Navigation("ProductionProfileNGL");

                    b.Navigation("ProductionProfileOil");

                    b.Navigation("ProductionProfileWater");

                    b.Navigation("ProductionProfileWaterInjection");
                });

            modelBuilder.Entity("api.Models.Exploration", b =>
                {
                    b.Navigation("CostProfile");

                    b.Navigation("DrillingSchedule");

                    b.Navigation("GAndGAdminCost");
                });

            modelBuilder.Entity("api.Models.Project", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("DrainageStrategies");

                    b.Navigation("Explorations");

                    b.Navigation("Substructures");

                    b.Navigation("Surfs");

                    b.Navigation("Topsides");

                    b.Navigation("Transports");

                    b.Navigation("WellProjects");
                });

            modelBuilder.Entity("api.Models.Substructure", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");
                });

            modelBuilder.Entity("api.Models.Surf", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");
                });

            modelBuilder.Entity("api.Models.Topside", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");
                });

            modelBuilder.Entity("api.Models.Transport", b =>
                {
                    b.Navigation("CessationCostProfile");

                    b.Navigation("CostProfile");
                });

            modelBuilder.Entity("api.Models.WellProject", b =>
                {
                    b.Navigation("CostProfile");

                    b.Navigation("DrillingSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
