/* tslint:disable */
/* eslint-disable */
/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ArtificialLift = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ArtificialLift = typeof ArtificialLift[keyof typeof ArtificialLift];


/**
 * 
 * @export
 * @interface Case
 */
export interface Case {
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'createTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'modifyTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Case
     */
    'referenceCase'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'dG4Date'?: string;
    /**
     * 
     * @type {Project}
     * @memberof Case
     */
    'project'?: Project;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'drainageStrategyLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'wellProjectLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'surfLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'substructureLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'topsideLink'?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    'transportLink'?: string;
}
/**
 * 
 * @export
 * @interface Co2Emissions
 */
export interface Co2Emissions {
    /**
     * 
     * @type {string}
     * @memberof Co2Emissions
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof Co2Emissions
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {DrainageStrategy}
     * @memberof Co2Emissions
     */
    'drainageStrategy'?: DrainageStrategy;
}
/**
 * 
 * @export
 * @interface Co2EmissionsDto
 */
export interface Co2EmissionsDto {
    /**
     * 
     * @type {string}
     * @memberof Co2EmissionsDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof Co2EmissionsDto
     */
    'yearValues'?: Array<DoubleYearValue> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Currency = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type Currency = typeof Currency[keyof typeof Currency];


/**
 * 
 * @export
 * @interface DoubleYearValue
 */
export interface DoubleYearValue {
    /**
     * 
     * @type {number}
     * @memberof DoubleYearValue
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof DoubleYearValue
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof DoubleYearValue
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface DrainageStrategy
 */
export interface DrainageStrategy {
    /**
     * 
     * @type {string}
     * @memberof DrainageStrategy
     */
    'id'?: string;
    /**
     * 
     * @type {Project}
     * @memberof DrainageStrategy
     */
    'project'?: Project;
    /**
     * 
     * @type {string}
     * @memberof DrainageStrategy
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrainageStrategy
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DrainageStrategy
     */
    'nglYield'?: number;
    /**
     * 
     * @type {ArtificialLift}
     * @memberof DrainageStrategy
     */
    'artificialLift'?: ArtificialLift;
    /**
     * 
     * @type {ProductionProfileOil}
     * @memberof DrainageStrategy
     */
    'productionProfileOil'?: ProductionProfileOil;
    /**
     * 
     * @type {ProductionProfileGas}
     * @memberof DrainageStrategy
     */
    'productionProfileGas'?: ProductionProfileGas;
    /**
     * 
     * @type {ProductionProfileWater}
     * @memberof DrainageStrategy
     */
    'productionProfileWater'?: ProductionProfileWater;
    /**
     * 
     * @type {ProductionProfileWaterInjection}
     * @memberof DrainageStrategy
     */
    'productionProfileWaterInjection'?: ProductionProfileWaterInjection;
    /**
     * 
     * @type {FuelFlaringAndLosses}
     * @memberof DrainageStrategy
     */
    'fuelFlaringAndLosses'?: FuelFlaringAndLosses;
    /**
     * 
     * @type {NetSalesGas}
     * @memberof DrainageStrategy
     */
    'netSalesGas'?: NetSalesGas;
    /**
     * 
     * @type {Co2Emissions}
     * @memberof DrainageStrategy
     */
    'co2Emissions'?: Co2Emissions;
}
/**
 * 
 * @export
 * @interface DrainageStrategyDto
 */
export interface DrainageStrategyDto {
    /**
     * 
     * @type {string}
     * @memberof DrainageStrategyDto
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DrainageStrategyDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DrainageStrategyDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof DrainageStrategyDto
     */
    'nglYield'?: number;
    /**
     * 
     * @type {ArtificialLift}
     * @memberof DrainageStrategyDto
     */
    'artificialLift'?: ArtificialLift;
    /**
     * 
     * @type {ProductionProfileOilDto}
     * @memberof DrainageStrategyDto
     */
    'productionProfileOil'?: ProductionProfileOilDto;
    /**
     * 
     * @type {ProductionProfileGasDto}
     * @memberof DrainageStrategyDto
     */
    'productionProfileGas'?: ProductionProfileGasDto;
    /**
     * 
     * @type {ProductionProfileWaterDto}
     * @memberof DrainageStrategyDto
     */
    'productionProfileWater'?: ProductionProfileWaterDto;
    /**
     * 
     * @type {ProductionProfileWaterInjectionDto}
     * @memberof DrainageStrategyDto
     */
    'productionProfileWaterInjection'?: ProductionProfileWaterInjectionDto;
    /**
     * 
     * @type {FuelFlaringAndLossesDto}
     * @memberof DrainageStrategyDto
     */
    'fuelFlaringAndLosses'?: FuelFlaringAndLossesDto;
    /**
     * 
     * @type {NetSalesGasDto}
     * @memberof DrainageStrategyDto
     */
    'netSalesGas'?: NetSalesGasDto;
    /**
     * 
     * @type {Co2EmissionsDto}
     * @memberof DrainageStrategyDto
     */
    'co2Emissions'?: Co2EmissionsDto;
}
/**
 * 
 * @export
 * @interface DrillingSchedule
 */
export interface DrillingSchedule {
    /**
     * 
     * @type {string}
     * @memberof DrillingSchedule
     */
    'id'?: string;
    /**
     * 
     * @type {Array<Int32YearValue>}
     * @memberof DrillingSchedule
     */
    'yearValues'?: Array<Int32YearValue> | null;
    /**
     * 
     * @type {WellProject}
     * @memberof DrillingSchedule
     */
    'wellProject'?: WellProject;
}
/**
 * 
 * @export
 * @interface Exploration
 */
export interface Exploration {
    /**
     * 
     * @type {string}
     * @memberof Exploration
     */
    'id'?: string;
    /**
     * 
     * @type {Project}
     * @memberof Exploration
     */
    'project'?: Project;
    /**
     * 
     * @type {string}
     * @memberof Exploration
     */
    'name'?: string | null;
    /**
     * 
     * @type {WellType}
     * @memberof Exploration
     */
    'wellType'?: WellType;
    /**
     * 
     * @type {ExplorationCostProfile}
     * @memberof Exploration
     */
    'costProfile'?: ExplorationCostProfile;
    /**
     * 
     * @type {ExplorationDrillingSchedule}
     * @memberof Exploration
     */
    'drillingSchedule'?: ExplorationDrillingSchedule;
    /**
     * 
     * @type {GAndGAdminCost}
     * @memberof Exploration
     */
    'gAndGAdminCost'?: GAndGAdminCost;
    /**
     * 
     * @type {number}
     * @memberof Exploration
     */
    'rigMobDemob'?: number;
}
/**
 * 
 * @export
 * @interface ExplorationCostProfile
 */
export interface ExplorationCostProfile {
    /**
     * 
     * @type {string}
     * @memberof ExplorationCostProfile
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ExplorationCostProfile
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {string}
     * @memberof ExplorationCostProfile
     */
    'epaVersion'?: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof ExplorationCostProfile
     */
    'currency'?: Currency;
    /**
     * 
     * @type {Exploration}
     * @memberof ExplorationCostProfile
     */
    'exploration'?: Exploration;
}
/**
 * 
 * @export
 * @interface ExplorationDrillingSchedule
 */
export interface ExplorationDrillingSchedule {
    /**
     * 
     * @type {string}
     * @memberof ExplorationDrillingSchedule
     */
    'id'?: string;
    /**
     * 
     * @type {Array<Int32YearValue>}
     * @memberof ExplorationDrillingSchedule
     */
    'yearValues'?: Array<Int32YearValue> | null;
    /**
     * 
     * @type {Exploration}
     * @memberof ExplorationDrillingSchedule
     */
    'exploration'?: Exploration;
}
/**
 * 
 * @export
 * @interface FuelFlaringAndLosses
 */
export interface FuelFlaringAndLosses {
    /**
     * 
     * @type {string}
     * @memberof FuelFlaringAndLosses
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof FuelFlaringAndLosses
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {DrainageStrategy}
     * @memberof FuelFlaringAndLosses
     */
    'drainageStrategy'?: DrainageStrategy;
}
/**
 * 
 * @export
 * @interface FuelFlaringAndLossesDto
 */
export interface FuelFlaringAndLossesDto {
    /**
     * 
     * @type {string}
     * @memberof FuelFlaringAndLossesDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof FuelFlaringAndLossesDto
     */
    'yearValues'?: Array<DoubleYearValue> | null;
}
/**
 * 
 * @export
 * @interface GAndGAdminCost
 */
export interface GAndGAdminCost {
    /**
     * 
     * @type {string}
     * @memberof GAndGAdminCost
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof GAndGAdminCost
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {string}
     * @memberof GAndGAdminCost
     */
    'epaVersion'?: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof GAndGAdminCost
     */
    'currency'?: Currency;
    /**
     * 
     * @type {Exploration}
     * @memberof GAndGAdminCost
     */
    'exploration'?: Exploration;
}
/**
 * 
 * @export
 * @interface Int32YearValue
 */
export interface Int32YearValue {
    /**
     * 
     * @type {number}
     * @memberof Int32YearValue
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Int32YearValue
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof Int32YearValue
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Maturity = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type Maturity = typeof Maturity[keyof typeof Maturity];


/**
 * 
 * @export
 * @interface NetSalesGas
 */
export interface NetSalesGas {
    /**
     * 
     * @type {string}
     * @memberof NetSalesGas
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof NetSalesGas
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {DrainageStrategy}
     * @memberof NetSalesGas
     */
    'drainageStrategy'?: DrainageStrategy;
}
/**
 * 
 * @export
 * @interface NetSalesGasDto
 */
export interface NetSalesGasDto {
    /**
     * 
     * @type {string}
     * @memberof NetSalesGasDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof NetSalesGasDto
     */
    'yearValues'?: Array<DoubleYearValue> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ProductionFlowline = {
    NUMBER_999: 999
} as const;

export type ProductionFlowline = typeof ProductionFlowline[keyof typeof ProductionFlowline];


/**
 * 
 * @export
 * @interface ProductionProfileGas
 */
export interface ProductionProfileGas {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileGas
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileGas
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {DrainageStrategy}
     * @memberof ProductionProfileGas
     */
    'drainageStrategy'?: DrainageStrategy;
}
/**
 * 
 * @export
 * @interface ProductionProfileGasDto
 */
export interface ProductionProfileGasDto {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileGasDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileGasDto
     */
    'yearValues'?: Array<DoubleYearValue> | null;
}
/**
 * 
 * @export
 * @interface ProductionProfileOil
 */
export interface ProductionProfileOil {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileOil
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileOil
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {DrainageStrategy}
     * @memberof ProductionProfileOil
     */
    'drainageStrategy'?: DrainageStrategy;
}
/**
 * 
 * @export
 * @interface ProductionProfileOilDto
 */
export interface ProductionProfileOilDto {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileOilDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileOilDto
     */
    'yearValues'?: Array<DoubleYearValue> | null;
}
/**
 * 
 * @export
 * @interface ProductionProfileWater
 */
export interface ProductionProfileWater {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileWater
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileWater
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {DrainageStrategy}
     * @memberof ProductionProfileWater
     */
    'drainageStrategy'?: DrainageStrategy;
}
/**
 * 
 * @export
 * @interface ProductionProfileWaterDto
 */
export interface ProductionProfileWaterDto {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileWaterDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileWaterDto
     */
    'yearValues'?: Array<DoubleYearValue> | null;
}
/**
 * 
 * @export
 * @interface ProductionProfileWaterInjection
 */
export interface ProductionProfileWaterInjection {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileWaterInjection
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileWaterInjection
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {DrainageStrategy}
     * @memberof ProductionProfileWaterInjection
     */
    'drainageStrategy'?: DrainageStrategy;
}
/**
 * 
 * @export
 * @interface ProductionProfileWaterInjectionDto
 */
export interface ProductionProfileWaterInjectionDto {
    /**
     * 
     * @type {string}
     * @memberof ProductionProfileWaterInjectionDto
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof ProductionProfileWaterInjectionDto
     */
    'yearValues'?: Array<DoubleYearValue> | null;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'projectName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'projectDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'createDate'?: string;
    /**
     * 
     * @type {Array<Case>}
     * @memberof Project
     */
    'cases'?: Array<Case> | null;
    /**
     * 
     * @type {Array<Surf>}
     * @memberof Project
     */
    'surfs'?: Array<Surf> | null;
    /**
     * 
     * @type {Array<Substructure>}
     * @memberof Project
     */
    'substructures'?: Array<Substructure> | null;
    /**
     * 
     * @type {Array<Topside>}
     * @memberof Project
     */
    'topsides'?: Array<Topside> | null;
    /**
     * 
     * @type {Array<Transport>}
     * @memberof Project
     */
    'transports'?: Array<Transport> | null;
    /**
     * 
     * @type {ProjectPhase}
     * @memberof Project
     */
    'projectPhase'?: ProjectPhase;
    /**
     * 
     * @type {ProjectCategory}
     * @memberof Project
     */
    'projectCategory'?: ProjectCategory;
    /**
     * 
     * @type {Array<DrainageStrategy>}
     * @memberof Project
     */
    'drainageStrategies'?: Array<DrainageStrategy> | null;
    /**
     * 
     * @type {Array<WellProject>}
     * @memberof Project
     */
    'wellProjects'?: Array<WellProject> | null;
    /**
     * 
     * @type {Array<Exploration>}
     * @memberof Project
     */
    'explorations'?: Array<Exploration> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ProjectCategory = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7,
    NUMBER_8: 8,
    NUMBER_9: 9,
    NUMBER_10: 10,
    NUMBER_11: 11,
    NUMBER_12: 12,
    NUMBER_13: 13
} as const;

export type ProjectCategory = typeof ProjectCategory[keyof typeof ProjectCategory];


/**
 * 
 * @export
 * @enum {string}
 */

export const ProjectPhase = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ProjectPhase = typeof ProjectPhase[keyof typeof ProjectPhase];


/**
 * 
 * @export
 * @interface Substructure
 */
export interface Substructure {
    /**
     * 
     * @type {string}
     * @memberof Substructure
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Substructure
     */
    'name'?: string | null;
    /**
     * 
     * @type {Project}
     * @memberof Substructure
     */
    'project'?: Project;
    /**
     * 
     * @type {SubstructureCostProfile}
     * @memberof Substructure
     */
    'costProfile'?: SubstructureCostProfile;
    /**
     * 
     * @type {number}
     * @memberof Substructure
     */
    'dryWeight'?: number;
    /**
     * 
     * @type {Maturity}
     * @memberof Substructure
     */
    'maturity'?: Maturity;
}
/**
 * 
 * @export
 * @interface SubstructureCostProfile
 */
export interface SubstructureCostProfile {
    /**
     * 
     * @type {string}
     * @memberof SubstructureCostProfile
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof SubstructureCostProfile
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {string}
     * @memberof SubstructureCostProfile
     */
    'epaVersion'?: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof SubstructureCostProfile
     */
    'currency'?: Currency;
    /**
     * 
     * @type {Substructure}
     * @memberof SubstructureCostProfile
     */
    'substructure'?: Substructure;
}
/**
 * 
 * @export
 * @interface Surf
 */
export interface Surf {
    /**
     * 
     * @type {string}
     * @memberof Surf
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Surf
     */
    'name'?: string | null;
    /**
     * 
     * @type {Project}
     * @memberof Surf
     */
    'project'?: Project;
    /**
     * 
     * @type {SurfCostProfile}
     * @memberof Surf
     */
    'costProfile'?: SurfCostProfile;
    /**
     * 
     * @type {Maturity}
     * @memberof Surf
     */
    'maturity'?: Maturity;
    /**
     * 
     * @type {number}
     * @memberof Surf
     */
    'infieldPipelineSystemLength'?: number;
    /**
     * 
     * @type {number}
     * @memberof Surf
     */
    'umbilicalSystemLength'?: number;
    /**
     * 
     * @type {ArtificialLift}
     * @memberof Surf
     */
    'artificialLift'?: ArtificialLift;
    /**
     * 
     * @type {number}
     * @memberof Surf
     */
    'riserCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Surf
     */
    'templateCount'?: number;
    /**
     * 
     * @type {ProductionFlowline}
     * @memberof Surf
     */
    'productionFlowline'?: ProductionFlowline;
}
/**
 * 
 * @export
 * @interface SurfCostProfile
 */
export interface SurfCostProfile {
    /**
     * 
     * @type {string}
     * @memberof SurfCostProfile
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof SurfCostProfile
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {string}
     * @memberof SurfCostProfile
     */
    'epaVersion'?: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof SurfCostProfile
     */
    'currency'?: Currency;
    /**
     * 
     * @type {Surf}
     * @memberof SurfCostProfile
     */
    'surf'?: Surf;
}
/**
 * 
 * @export
 * @interface Topside
 */
export interface Topside {
    /**
     * 
     * @type {string}
     * @memberof Topside
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Topside
     */
    'name'?: string | null;
    /**
     * 
     * @type {Project}
     * @memberof Topside
     */
    'project'?: Project;
    /**
     * 
     * @type {TopsideCostProfile}
     * @memberof Topside
     */
    'costProfile'?: TopsideCostProfile;
    /**
     * 
     * @type {number}
     * @memberof Topside
     */
    'dryWeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof Topside
     */
    'oilCapacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Topside
     */
    'gasCapacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Topside
     */
    'facilitiesAvailability'?: number;
    /**
     * 
     * @type {ArtificialLift}
     * @memberof Topside
     */
    'artificialLift'?: ArtificialLift;
    /**
     * 
     * @type {Maturity}
     * @memberof Topside
     */
    'maturity'?: Maturity;
}
/**
 * 
 * @export
 * @interface TopsideCostProfile
 */
export interface TopsideCostProfile {
    /**
     * 
     * @type {string}
     * @memberof TopsideCostProfile
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof TopsideCostProfile
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {string}
     * @memberof TopsideCostProfile
     */
    'epaVersion'?: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof TopsideCostProfile
     */
    'currency'?: Currency;
    /**
     * 
     * @type {Topside}
     * @memberof TopsideCostProfile
     */
    'topside'?: Topside;
}
/**
 * 
 * @export
 * @interface Transport
 */
export interface Transport {
    /**
     * 
     * @type {string}
     * @memberof Transport
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transport
     */
    'name'?: string | null;
    /**
     * 
     * @type {Project}
     * @memberof Transport
     */
    'project'?: Project;
    /**
     * 
     * @type {TransportCostProfile}
     * @memberof Transport
     */
    'costProfile'?: TransportCostProfile;
    /**
     * 
     * @type {number}
     * @memberof Transport
     */
    'gasExportPipelineLength'?: number;
    /**
     * 
     * @type {number}
     * @memberof Transport
     */
    'oilExportPipelineLength'?: number;
    /**
     * 
     * @type {Maturity}
     * @memberof Transport
     */
    'maturity'?: Maturity;
}
/**
 * 
 * @export
 * @interface TransportCostProfile
 */
export interface TransportCostProfile {
    /**
     * 
     * @type {string}
     * @memberof TransportCostProfile
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof TransportCostProfile
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {string}
     * @memberof TransportCostProfile
     */
    'epaVersion'?: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof TransportCostProfile
     */
    'currency'?: Currency;
    /**
     * 
     * @type {Transport}
     * @memberof TransportCostProfile
     */
    'transport'?: Transport;
}
/**
 * 
 * @export
 * @interface WellProject
 */
export interface WellProject {
    /**
     * 
     * @type {string}
     * @memberof WellProject
     */
    'id'?: string;
    /**
     * 
     * @type {Project}
     * @memberof WellProject
     */
    'project'?: Project;
    /**
     * 
     * @type {string}
     * @memberof WellProject
     */
    'name'?: string | null;
    /**
     * 
     * @type {WellProjectCostProfile}
     * @memberof WellProject
     */
    'costProfile'?: WellProjectCostProfile;
    /**
     * 
     * @type {DrillingSchedule}
     * @memberof WellProject
     */
    'drillingSchedule'?: DrillingSchedule;
    /**
     * 
     * @type {number}
     * @memberof WellProject
     */
    'producerCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof WellProject
     */
    'gasInjectorCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof WellProject
     */
    'waterInjectorCount'?: number;
    /**
     * 
     * @type {ArtificialLift}
     * @memberof WellProject
     */
    'artificialLift'?: ArtificialLift;
    /**
     * 
     * @type {number}
     * @memberof WellProject
     */
    'rigMobDemob'?: number;
    /**
     * 
     * @type {number}
     * @memberof WellProject
     */
    'annualWellInterventionCost'?: number;
    /**
     * 
     * @type {number}
     * @memberof WellProject
     */
    'pluggingAndAbandonment'?: number;
}
/**
 * 
 * @export
 * @interface WellProjectCostProfile
 */
export interface WellProjectCostProfile {
    /**
     * 
     * @type {string}
     * @memberof WellProjectCostProfile
     */
    'id'?: string;
    /**
     * 
     * @type {Array<DoubleYearValue>}
     * @memberof WellProjectCostProfile
     */
    'yearValues'?: Array<DoubleYearValue> | null;
    /**
     * 
     * @type {string}
     * @memberof WellProjectCostProfile
     */
    'epaVersion'?: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof WellProjectCostProfile
     */
    'currency'?: Currency;
    /**
     * 
     * @type {WellProject}
     * @memberof WellProjectCostProfile
     */
    'wellProject'?: WellProject;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WellType = {
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type WellType = typeof WellType[keyof typeof WellType];



/**
 * DrainageStrategyApi - axios parameter creator
 * @export
 */
export const DrainageStrategyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DrainageStrategyDto} [drainageStrategyDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrainageStrategy: async (drainageStrategyDto?: DrainageStrategyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/DrainageStrategy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(drainageStrategyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrainageStrategies: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getDrainageStrategies', 'projectId', projectId)
            const localVarPath = `/DrainageStrategy/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrainageStrategyApi - functional programming interface
 * @export
 */
export const DrainageStrategyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrainageStrategyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DrainageStrategyDto} [drainageStrategyDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDrainageStrategy(drainageStrategyDto?: DrainageStrategyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrainageStrategy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDrainageStrategy(drainageStrategyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDrainageStrategies(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DrainageStrategy>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDrainageStrategies(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DrainageStrategyApi - factory interface
 * @export
 */
export const DrainageStrategyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrainageStrategyApiFp(configuration)
    return {
        /**
         * 
         * @param {DrainageStrategyDto} [drainageStrategyDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDrainageStrategy(drainageStrategyDto?: DrainageStrategyDto, options?: any): AxiosPromise<DrainageStrategy> {
            return localVarFp.createDrainageStrategy(drainageStrategyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDrainageStrategies(projectId: string, options?: any): AxiosPromise<Array<DrainageStrategy>> {
            return localVarFp.getDrainageStrategies(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrainageStrategyApi - object-oriented interface
 * @export
 * @class DrainageStrategyApi
 * @extends {BaseAPI}
 */
export class DrainageStrategyApi extends BaseAPI {
    /**
     * 
     * @param {DrainageStrategyDto} [drainageStrategyDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrainageStrategyApi
     */
    public createDrainageStrategy(drainageStrategyDto?: DrainageStrategyDto, options?: AxiosRequestConfig) {
        return DrainageStrategyApiFp(this.configuration).createDrainageStrategy(drainageStrategyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrainageStrategyApi
     */
    public getDrainageStrategies(projectId: string, options?: AxiosRequestConfig) {
        return DrainageStrategyApiFp(this.configuration).getDrainageStrategies(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExplorationApi - axios parameter creator
 * @export
 */
export const ExplorationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplorations: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getExplorations', 'projectId', projectId)
            const localVarPath = `/Exploration/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExplorationApi - functional programming interface
 * @export
 */
export const ExplorationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExplorationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExplorations(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exploration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExplorations(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExplorationApi - factory interface
 * @export
 */
export const ExplorationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExplorationApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplorations(projectId: string, options?: any): AxiosPromise<Array<Exploration>> {
            return localVarFp.getExplorations(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExplorationApi - object-oriented interface
 * @export
 * @class ExplorationApi
 * @extends {BaseAPI}
 */
export class ExplorationApi extends BaseAPI {
    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExplorationApi
     */
    public getExplorations(projectId: string, options?: AxiosRequestConfig) {
        return ExplorationApiFp(this.configuration).getExplorations(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FacilityApi - axios parameter creator
 * @export
 */
export const FacilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstructuresForProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSubstructuresForProject', 'projectId', projectId)
            const localVarPath = `/Facility/substructure/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurfsForProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSurfsForProject', 'projectId', projectId)
            const localVarPath = `/Facility/surf/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopsidesForProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTopsidesForProject', 'projectId', projectId)
            const localVarPath = `/Facility/topside/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransportsForProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTransportsForProject', 'projectId', projectId)
            const localVarPath = `/Facility/transport/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FacilityApi - functional programming interface
 * @export
 */
export const FacilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FacilityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubstructuresForProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Substructure>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubstructuresForProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurfsForProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Surf>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSurfsForProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopsidesForProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Topside>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopsidesForProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransportsForProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransportsForProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FacilityApi - factory interface
 * @export
 */
export const FacilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FacilityApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubstructuresForProject(projectId: string, options?: any): AxiosPromise<Array<Substructure>> {
            return localVarFp.getSubstructuresForProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurfsForProject(projectId: string, options?: any): AxiosPromise<Array<Surf>> {
            return localVarFp.getSurfsForProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopsidesForProject(projectId: string, options?: any): AxiosPromise<Array<Topside>> {
            return localVarFp.getTopsidesForProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransportsForProject(projectId: string, options?: any): AxiosPromise<Array<Transport>> {
            return localVarFp.getTransportsForProject(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FacilityApi - object-oriented interface
 * @export
 * @class FacilityApi
 * @extends {BaseAPI}
 */
export class FacilityApi extends BaseAPI {
    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public getSubstructuresForProject(projectId: string, options?: AxiosRequestConfig) {
        return FacilityApiFp(this.configuration).getSubstructuresForProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public getSurfsForProject(projectId: string, options?: AxiosRequestConfig) {
        return FacilityApiFp(this.configuration).getSurfsForProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public getTopsidesForProject(projectId: string, options?: AxiosRequestConfig) {
        return FacilityApiFp(this.configuration).getTopsidesForProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilityApi
     */
    public getTransportsForProject(projectId: string, options?: AxiosRequestConfig) {
        return FacilityApiFp(this.configuration).getTransportsForProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProject', 'projectId', projectId)
            const localVarPath = `/Project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Project>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject(projectId: string, options?: any): AxiosPromise<Project> {
            return localVarFp.getProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(options?: any): AxiosPromise<Array<Project>> {
            return localVarFp.getProjects(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProject(projectId: string, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjects(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProjects(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WellProjectApi - axios parameter creator
 * @export
 */
export const WellProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWellProjects: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getWellProjects', 'projectId', projectId)
            const localVarPath = `/WellProject/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WellProjectApi - functional programming interface
 * @export
 */
export const WellProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WellProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWellProjects(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WellProject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWellProjects(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WellProjectApi - factory interface
 * @export
 */
export const WellProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WellProjectApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWellProjects(projectId: string, options?: any): AxiosPromise<Array<WellProject>> {
            return localVarFp.getWellProjects(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WellProjectApi - object-oriented interface
 * @export
 * @class WellProjectApi
 * @extends {BaseAPI}
 */
export class WellProjectApi extends BaseAPI {
    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WellProjectApi
     */
    public getWellProjects(projectId: string, options?: AxiosRequestConfig) {
        return WellProjectApiFp(this.configuration).getWellProjects(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}


